# import Query.* from "./generated/graphql-schema/prisma.graphql"

type Query {
  """Get availabl0e recording stores from a given stream"""
  stores(stream: StreamWhereUniqueInput!): [Store]

  """Get store by nae or most recent for a given stream"""
  store(where: StoreWhereUniqueInput!): Store
}

"""Continuous recroding available from a given stream for fragment extraction"""
type Store @cacheControl(maxAge: 30) {
  """Name that identifies this store in the recordings provider"""
  name: String!
  start: DateTime @cacheControl(maxAge: 10)
  end: DateTime @cacheControl(maxAge: 10)
  stream: Stream!
  fragments: [Fragment!]!
  exclusions: [Exclusion!]!
}

type Mutation {
  addFragment(store: DateTime, duration: Int, storeName: String): Fragment!

  adjustFragment(fragmentId: ID!, newStart: DateTime, newEnd: DateTime): Fragment!

  addLabel(fragment: FragmentWhereUniqueInput!, name: String!, value: String): Label!
  removeLabel(fragment: FragmentWhereUniqueInput!, name: String!): Label!
}

input StoreWhereUniqueInput {
  stream: StreamWhereUniqueInput!
  """If no name is provided, mot recent store will be selected"""
  name: String
}

# Apollo Cache Control schema hints
directive @cacheControl(
  maxAge: Int,
  scope: CacheControlScope
) on OBJECT | FIELD_DEFINITION

enum CacheControlScope {
  PUBLIC
  PRIVATE
}